= event_state

* http://github.com/jdleesmiller/event_state

== SYNOPSIS

A small embedded DSL for implementing stateful protocols in EventMachine using
finite state machines.

The protocol is specified in terms of _states_ and _messages_. The state
determines which messages the machine can send and receive according to the
protocol. When the machine sends or receives a message, it changes to a new
state.

=== Example: An Echo Machine

This machine receives a +noise+ (packaged in an +EchoMessage+), and, after a
short delay, it sends the same noise back to the sender.

  class EchoServer < EventState::ObjectMachine
    state :listening do
      on_recv String, :speaking
    end

    state :speaking do
      on_enter do |message|
        EM.defer do
          sleep 0.5
          send_message message
        end
      end

      on_send String, :listening
    end
  end

It has two states, +:listening+ and +:speaking+.

http://github.com/jdleesmiller/event_state/raw/master/assets/echo.png

== INSTALLATION

  sudo gem install event_state

== DEVELOPMENT

TODO developer advice

== TODO

* want a 'finish_machine' or similar call to work out implicitly defined states
  (e.g. the current server doesn't have a state block for :done, so transitions
  to that state fail (tries to call on_enter on a nil state)
    - we could trap that particular case, but it seems better to have some
      validation
    - could wrap it in yet another block, but that seems overkill

== RELATED PROJECTS

http://slagyr.github.com/statemachine

== LICENSE

(The MIT License)

Copyright (c) 2011 John Lees-Miller

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

